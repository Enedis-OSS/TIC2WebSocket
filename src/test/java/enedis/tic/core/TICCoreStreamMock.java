// Copyright (C) 2025 Enedis Smarties team <dt-dsi-nexus-lab-smarties@enedis.fr>
//
// SPDX-FileContributor: Jehan BOUSCH
// SPDX-FileContributor: Mathieu SABARTHES
//
// SPDX-License-Identifier: Apache-2.0

package enedis.tic.core;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;

import enedis.lab.protocol.tic.TICMode;
import enedis.lab.types.DataDictionaryException;

public class TICCoreStreamMock implements TICCoreStream
{
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// CONSTANTS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// TYPES
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// STATIC METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// ATTRIBUTES
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public static List<TICCoreStreamMock>	streams	= new ArrayList<TICCoreStreamMock>();
	public Collection<TICCoreSubscriber>	subscribers;
	public boolean							running;
	public TICIdentifier					identifier;

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// CONSTRUCTORS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public TICCoreStreamMock(String portId, String portName, TICMode mode) throws DataDictionaryException
	{
		super();
		this.subscribers = new HashSet<TICCoreSubscriber>();
		this.running = false;
		this.identifier = new TICIdentifier(portId, portName, null);
		streams.add(this);
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// INTERFACE
	/// TICCoreStream
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override
	public TICIdentifier getIdentifier()
	{
		return this.identifier;
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// INTERFACE
	/// Task
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override
	public boolean isRunning()
	{
		return this.running;
	}

	@Override
	public void start()
	{
		this.running = true;
	}

	@Override
	public void stop()
	{
		this.running = false;
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// INTERFACE
	/// Notifier
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override
	public Collection<TICCoreSubscriber> getSubscribers()
	{
		return this.subscribers;
	}

	@Override
	public boolean hasSubscriber(TICCoreSubscriber subscriber)
	{
		return this.subscribers.contains(subscriber);
	}

	@Override
	public void subscribe(TICCoreSubscriber subscriber)
	{
		this.subscribers.add(subscriber);
	}

	@Override
	public void unsubscribe(TICCoreSubscriber subscriber)
	{
		this.subscribers.remove(subscriber);
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PUBLIC METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public void notifyOnData(TICCoreFrame frame)
	{
		for (TICCoreSubscriber subscriber : this.subscribers)
		{
			subscriber.onData(frame);
		}
	}

	public void notifyOnError(TICCoreError error)
	{
		for (TICCoreSubscriber subscriber : this.subscribers)
		{
			subscriber.onError(error);
		}
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PROTECTED METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PRIVATE METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
