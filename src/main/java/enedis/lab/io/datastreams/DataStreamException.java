// Copyright (C) 2025 Enedis Smarties team <dt-dsi-nexus-lab-smarties@enedis.fr>
//
// SPDX-FileContributor: Jehan BOUSCH
// SPDX-FileContributor: Mathieu SABARTHES
//
// SPDX-License-Identifier: Apache-2.0

package enedis.lab.io.datastreams;

/**
 * Specific exception for data stream
 */
public class DataStreamException extends Exception
{

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// CONSTANTS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private static final long serialVersionUID = 4079445021346677107L;

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// TYPES
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// STATIC METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Raise channel error exception
	 * 
	 * @param channelName
	 * @param info
	 * @throws DataStreamException
	 */
	public static void raiseChannelError(String channelName, String info) throws DataStreamException
	{
		throw new DataStreamException("Error occurs on channel " + channelName + " (" + info + ")");
	}

	/**
	 * Raise unhandle type exception
	 * 
	 * @param type
	 * @throws DataStreamException
	 */
	public static void raiseUnhandledType(String type) throws DataStreamException
	{
		throw new DataStreamException(type + " datastream is not handled");
	}

	/**
	 * Raise internal error exception
	 * 
	 * @param info
	 * @throws DataStreamException
	 */
	public static void raiseInternalError(String info) throws DataStreamException
	{
		throw new DataStreamException(info);
	}

	/**
	 * Raise invalid configuration exception
	 * 
	 * @param configuration
	 * @param expected_configuration_name
	 * @throws DataStreamException
	 */
	public static void raiseInvalidConfiguration(DataStreamConfiguration configuration, String expected_configuration_name) throws DataStreamException
	{
		throw new DataStreamException("Configuration " + configuration.getClass().getSimpleName() + " is not valid (" + expected_configuration_name + " expected)");
	}

	/**
	 * Raise invalid configuration exceotion
	 * 
	 * @param info
	 * @throws DataStreamException
	 */
	public static void raiseInvalidConfiguration(String info) throws DataStreamException
	{
		throw new DataStreamException(info);
	}

	/**
	 * Raise operation denied excpetion
	 * 
	 * @param operation
	 * @throws DataStreamException
	 */
	public static void raiseOperationDenied(String operation) throws DataStreamException
	{
		throw new DataStreamException("Operation \'" + operation + "\' is not allowed");
	}

	/**
	 * Raise unexpected error exception
	 * 
	 * @param info
	 * @throws DataStreamException
	 */
	public static void raiseUnexpectedError(String info) throws DataStreamException
	{
		throw new DataStreamException("Unexpected error occurs : " + info);
	}

	/**
	 * Raise already exists exception
	 * 
	 * @param dataStream
	 * @throws DataStreamException
	 */
	public static void raiseAlreadyExists(String dataStream) throws DataStreamException
	{
		throw new DataStreamException("DataStream " + dataStream + " already exists");
	}

	/**
	 * Raise creation failed exception
	 * 
	 * @param dataStream
	 * @param info
	 * @throws DataStreamException
	 */
	public static void raiseCreationFailed(String dataStream, String info) throws DataStreamException
	{
		throw new DataStreamException("Creation of dataStream " + dataStream + " creation failed : " + info);
	}
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// ATTRIBUTES
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Super class constructor
	 *
	 * @param message
	 * @param cause
	 */
	public DataStreamException(String message, Throwable cause)
	{
		super(message, cause);
	}

	/**
	 * Super class constructor
	 *
	 * @param message
	 */
	public DataStreamException(String message)
	{
		super(message);
	}

	/**
	 * Super class constructor
	 *
	 * @param cause
	 */
	public DataStreamException(Throwable cause)
	{
		super(cause);
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// CONSTRUCTORS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// INTERFACE
	/// interfaceName
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PUBLIC METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PROTECTED METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PRIVATE METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
