// Copyright (C) 2025 Enedis Smarties team <dt-dsi-nexus-lab-smarties@enedis.fr>
//
// SPDX-FileContributor: Jehan BOUSCH
// SPDX-FileContributor: Mathieu SABARTHES
//
// SPDX-License-Identifier: Apache-2.0

package enedis.lab.io.channels;

import java.util.Collection;

import enedis.lab.util.task.NotifierBase;

/**
 * Channel physical
 */
public abstract class ChannelPhysical extends ChannelBase
{
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// CONSTANTS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// TYPES
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// STATIC METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// ATTRIBUTES
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private NotifierBase<ChannelListener>	notifier;
	protected ChannelStatus					status;

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// CONSTRUCTORS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Constructor
	 *
	 * @param configuration
	 *            configuration used to set the channel
	 * @throws ChannelException
	 */
	protected ChannelPhysical(ChannelConfiguration configuration) throws ChannelException
	{
		super(configuration);
		this.init();
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// INTERFACE
	/// Channel
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override
	public void subscribe(ChannelListener listener)
	{
		this.notifier.subscribe(listener);
	}

	@Override
	public void unsubscribe(ChannelListener listener)
	{
		this.notifier.unsubscribe(listener);
	}

	@Override
	public boolean hasSubscriber(ChannelListener subscriber)
	{
		return this.notifier.hasSubscriber(subscriber);
	}

	@Override
	public Collection<ChannelListener> getSubscribers()
	{
		return this.notifier.getSubscribers();
	}

	@Override
	public String getName()
	{
		return this.configuration.getName();
	}

	@Override
	public ChannelProtocol getProtocol()
	{
		return this.configuration.getProtocol();
	}

	@Override
	public ChannelDirection getDirection()
	{
		return this.configuration.getDirection();
	}

	@Override
	public ChannelStatus getStatus()
	{
		return this.status;
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PUBLIC METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override
	public ChannelConfiguration getConfiguration()
	{
		return this.configuration;
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PROTECTED METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Set the channel status
	 *
	 * @param status
	 *            channel status
	 */
	protected void setStatus(ChannelStatus status)
	{
		this.setStatus(status, true);
	}

	/**
	 * Set the channel status. If 'notify' argument is false, no channel listener will be notified about a new status,
	 * otherwise, the will
	 *
	 * @param status
	 *            channel status
	 * @param notify
	 *            if 'true', the channel's listener will be notified, else it will not
	 */
	protected void setStatus(ChannelStatus status, boolean notify)
	{
		if (status != this.status)
		{
			this.status = status;
			if (status == ChannelStatus.ERROR)
			{
				this.logger.error("Channel " + this.getName() + " new status : " + status.name());
			}
			else
			{
				this.logger.info("Channel " + this.getName() + " new status : " + status.name());
			}
			if (true == notify)
			{
				this.notifyOnStatusChanged();
			}
		}
	}

	protected void notifyOnDataRead(byte[] data)
	{
		if (data != null)
		{
			for (ChannelListener subscriber : this.notifier.getSubscribers())
			{
				subscriber.onDataRead(this.getName(), data);
			}
		}
	}

	protected void notifyOnDataWritten(byte[] data)
	{
		if (data != null)
		{
			for (ChannelListener subscriber : this.notifier.getSubscribers())
			{
				subscriber.onDataWritten(this.getName(), data);
			}
		}
	}

	protected void notifyOnStatusChanged()
	{
		for (ChannelListener subscriber : this.notifier.getSubscribers())
		{
			subscriber.onStatusChanged(this.getName(), this.status);
		}
	}

	protected void notifyOnErrorDetected(int errorCode, String errorMessage)
	{
		for (ChannelListener subscriber : this.notifier.getSubscribers())
		{
			subscriber.onErrorDetected(this.getName(), errorCode, errorMessage);
		}
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PRIVATE METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private void init()
	{
		this.status = ChannelStatus.STOPPED;
		this.notifier = new NotifierBase<ChannelListener>();
	}
}
