// Copyright (C) 2025 Enedis Smarties team <dt-dsi-nexus-lab-smarties@enedis.fr>
// 
// SPDX-FileContributor: Jehan BOUSCH
// SPDX-FileContributor: Mathieu SABARTHES
//
// SPDX-License-Identifier: Apache-2.0

package enedis.lab.io.channels;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import enedis.lab.types.DataDictionaryException;
import enedis.lab.util.task.TaskPeriodic;

/**
 * Channel base
 */
public abstract class ChannelBase extends TaskPeriodic implements Channel
{
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// CONSTANTS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// TYPES
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// STATIC METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// ATTRIBUTES
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	protected Logger				logger;
	protected ChannelConfiguration	configuration;

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// CONSTRUCTORS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Constructor
	 *
	 * @param configuration
	 *            configuration used to set the channel
	 * @throws ChannelException
	 */
	protected ChannelBase(ChannelConfiguration configuration) throws ChannelException
	{
		this.logger = LogManager.getLogger(this.getClass());
		this.setup(configuration);
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// INTERFACE
	/// Channel
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override
	public void setup(ChannelConfiguration configuration) throws ChannelException
	{
		/* 1. Check configuration */
		if (configuration == null)
		{
			ChannelException.raiseInvalidConfiguration("null");
		}
		/* 2. Copy configuration */
		ChannelConfiguration configurationBackUp = null;
		try
		{
			if (this.configuration == null)
			{
				this.configuration = (ChannelConfiguration) configuration.clone();
			}
			else
			{
				configurationBackUp = (ChannelConfiguration) this.configuration.clone();
				this.configuration.copy(configuration);
			}
		}
		catch (DataDictionaryException exception)
		{
			ChannelException.raiseInvalidConfiguration(exception.getMessage());
		}
		/* 3. Set up from internal configuration */
		try
		{
			this.setup();
		}
		catch (Exception exception)
		{
			/* 4. Restore internal configuration */
			if (configurationBackUp != null)
			{
				try
				{
					this.configuration.copy(configurationBackUp);
				}
				catch (DataDictionaryException dataDictionaryException)
				{
					this.logger.error("", dataDictionaryException);
				}
			}
		}
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PUBLIC METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PROTECTED METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	protected void setup() throws ChannelException
	{
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PRIVATE METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
