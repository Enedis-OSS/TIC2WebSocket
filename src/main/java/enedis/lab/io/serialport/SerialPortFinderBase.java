// Copyright (C) 2025 Enedis Smarties team <dt-dsi-nexus-lab-smarties@enedis.fr>
// 
// SPDX-FileContributor: Jehan BOUSCH
// SPDX-FileContributor: Mathieu SABARTHES
//
// SPDX-License-Identifier: Apache-2.0

package enedis.lab.io.serialport;

import org.apache.commons.lang3.SystemUtils;

import enedis.lab.types.DataList;

/**
 * Class used to find all serial port descriptor for any operating system
 */
public class SerialPortFinderBase implements SerialPortFinder
{
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// CONSTANTS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// TYPES
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// STATIC METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Program writing the serial port descriptor list (JSON format) on the output stream
	 *
	 * @param args
	 *            not used
	 */
	public static void main(String[] args)
	{
		DataList<SerialPortDescriptor> descriptors = getInstance().findAll();

		System.out.println(descriptors.toString(2));
	}

	/**
	 * Get instance
	 *
	 * @return Unique instance
	 */
	public static SerialPortFinder getInstance()
	{
		if (instance == null)
		{
			if (SystemUtils.IS_OS_WINDOWS)
			{
				instance = SerialPortFinderForWindows.getInstance();
			}
			else if (SystemUtils.IS_OS_LINUX)
			{
				instance = SerialPortFinderForLinux.getInstance();
			}
			else
			{
				throw new RuntimeException("Operating system " + SystemUtils.OS_NAME + " is not handled by " + SerialPortFinderBase.class.getName());
			}
		}

		return instance;
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// ATTRIBUTES
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private static SerialPortFinder instance;

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// CONSTRUCTORS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private SerialPortFinderBase()
	{
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// INTERFACE
	/// SerialPortFinder
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override
	public DataList<SerialPortDescriptor> findAll()
	{
		return instance.findAll();
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PUBLIC METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PROTECTED METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PRIVATE METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
