// Copyright (C) 2025 Enedis Smarties team <dt-dsi-nexus-lab-smarties@enedis.fr>
// 
// SPDX-FileContributor: Jehan BOUSCH
// SPDX-FileContributor: Mathieu SABARTHES
//
// SPDX-License-Identifier: Apache-2.0

package enedis.lab.util.task;

import java.util.concurrent.atomic.AtomicLong;

import enedis.lab.util.time.Time;

/**
 * Periodic task with configurable period
 */
public abstract class TaskPeriodic extends TaskBase
{
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// CONSTANTS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Default period (in milliseconds) used to execute process
	 */
	public static final long	DEFAULT_PERIOD	= 1000;

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// TYPES
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// STATIC METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// ATTRIBUTES
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private AtomicLong			period			= new AtomicLong();

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// CONSTRUCTORS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Constructor with default parameter
	 *
	 * @see #DEFAULT_PERIOD
	 */
	public TaskPeriodic()
	{
		super();
		this.setPeriod(DEFAULT_PERIOD);
	}

	/**
	 * Constructor with polling period
	 *
	 * @param period
	 *            the period (in milliseconds) used to execute process
	 */
	public TaskPeriodic(long period)
	{
		super();
		this.setPeriod(period);
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// INTERFACE
	/// Runnable
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override
	public void run()
	{
		this.runOnStart();
		while (!this.isStopRequired())
		{
			this.runProcess();
			if (this.isStopRequired())
			{
				break;
			}
			this.waitPeriod();
		}
		this.runOnTerminate();
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PUBLIC METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Get polling period
	 *
	 * @return The period (in milliseconds) used to execute process
	 */
	public long getPeriod()
	{
		return this.period.get();
	}

	/**
	 * Set the polling period
	 *
	 * @param period
	 *            the period (in milliseconds) used to execute process
	 * @throws IllegalArgumentException
	 *             if period <= 0
	 */
	public void setPeriod(long period)
	{
		if (period <= 0)
		{
			throw new IllegalArgumentException("Cannot set period " + period + " : must be > 0");
		}
		this.period.set(period);
	}

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PROTECTED METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// PRIVATE METHODS
	///
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private void waitPeriod()
	{
		Time.sleep(this.getPeriod());
	}
}
